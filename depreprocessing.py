# -*- coding: utf-8 -*-
"""DEPreProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8k6xh3MFnX844DXyLw1V7bTxewQEwf7
"""

#Execute only for the first time
!pip install ydata_profiling

#Execute only for the first time
from ydata_profiling import ProfileReport, compare

!wget https://raw.githubusercontent.com/IshanSingh611/Exploratory-Data-Analytics-of-Sachin-Tendulkar-ODI-with-Plotly/refs/heads/master/tendulkar_ODI.csv

import pandas as pd
import numpy as np
CricketDF = pd.read_csv("/content/tendulkar_ODI.csv")

#Execute only for the first time
report = ProfileReport(df=CricketDF, title="Sachin ODI Statistics Profling Report")

#Execute only for the first time
report.to_notebook_iframe()

CricketDF['Runs'] =CricketDF['Runs'].str.replace('*','',regex=False)
CricketDF['Runs'] =CricketDF['Runs'].replace('DNB',np.nan,regex=False)
CricketDF['Runs'] =CricketDF['Runs'].replace('TDNB',np.nan,regex=False)

CricketDF['Runs'].head(10)

CricketDF['Runs']=CricketDF['Runs'].astype(float)
print(CricketDF.dtypes)



CricketDF.drop(columns=['Mins','Ground'],inplace=True)

print(CricketDF.dtypes)

CricketDF=CricketDF.rename(columns={'Unnamed: 0': 'MatchID','BF':'BallsFaced','4s':'Boundaries'})
#Write Code to rename 6s
CricketDF=CricketDF.rename(columns={'6s': 'Sixers'})
#Write Code to rename Start Date to StartDate
CricketDF=CricketDF.rename(columns={'Start Date': 'StartDate'})

print(CricketDF)



CricketDF['Dismissal'] =CricketDF['Dismissal'].astype('category')
CricketDF['Inns'] =pd.Categorical(CricketDF['Inns'], categories=['1', '2', ''], ordered=True)
CricketDF['Pos'] =pd.Categorical(CricketDF['Pos'], categories=['1', '2', '3','4','5','6','7','8','9','10','11'], ordered=True)

CricketDF.dtypes

# Do profiling before changing data type or doing data cleaning
!pip install duckdb

import duckdb as db

strSQL ='Select Distinct Runs from CricketDF'
genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

strSQL ='SELECT distinct Runs FROM CricketDF WHERE TRY_CAST(Runs AS DOUBLE) IS NULL     AND Runs IS NOT NULL'
genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

strSQL ='SELECT distinct BallsFaced FROM CricketDF WHERE TRY_CAST(BallsFaced AS DOUBLE) IS NULL     AND BallsFaced IS NOT NULL'
genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

strSQL ='SELECT distinct Boundaries FROM CricketDF WHERE TRY_CAST(Boundaries AS DOUBLE) IS NULL     AND Boundaries IS NOT NULL'
genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

strSQL ='SELECT distinct Sixers FROM CricketDF WHERE TRY_CAST(Sixers AS Double) IS NULL     AND Sixers IS NOT NULL'
genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

strSQL ='SELECT distinct TRY_CAST(StartDate AS Date) FROM CricketDF WHERE StartDate IS NOT NULL'

genSQLResult=db.execute(strSQL).fetch_df()
genSQLResult.head(106)

CricketDF['StartDate'] = pd.to_datetime(CricketDF['StartDate'], format='%d-%b-%y')

# Format the datetime objects to YYYY-mm-dd strings
CricketDF['StartDate'] = CricketDF['StartDate'].dt.strftime('%Y-%m-%d')

CricketDF = CricketDF.replace('-', np.nan)
CricketDF['Opposition'] =CricketDF['Opposition'].str.replace('v ','',regex=False)

CricketDF.head(10)

CricketDF.dtypes

CricketDF['Runs']=CricketDF['Runs'].fillna(0)
CricketDF['Runs']=CricketDF['Runs'].astype(int)

CricketDF['BallsFaced']=CricketDF['BallsFaced'].fillna(0)
CricketDF['BallsFaced']=CricketDF['BallsFaced'].astype(int)

CricketDF['Boundaries']=CricketDF['Boundaries'].fillna(0)
CricketDF['Boundaries']=CricketDF['Boundaries'].astype(int)

CricketDF['Sixers']=CricketDF['Sixers'].fillna(0)
CricketDF['Sixers']=CricketDF['Sixers'].astype(int)

CricketDF['Sixers']=CricketDF['Sixers'].fillna(0)
CricketDF['Sixers']=CricketDF['Sixers'].astype(int)

CricketDF['SR']=CricketDF['SR'].fillna(0)
CricketDF['SR']=CricketDF['SR'].astype(float)

CricketDF['Opposition']=CricketDF['Opposition'].astype('string')
CricketDF['StartDate']=CricketDF['StartDate'].astype('datetime64[ns]')

CricketDF.dtypes

CricketDF.head(10)

import re
from datetime import datetime
from typing import List, Union, Optional

def clean_spaces(text: str) -> str:
      return re.sub(' +', ' ', str(text).strip())

def standardize_date(date_string: str) -> Optional[str]:
    date_formats = ["%Y-%m-%d", "%d-%m-%Y", "%m/%d/%Y", "%d/%m/%Y", "%B %d, %Y"]
    for fmt in date_formats:
        try:
            return datetime.strptime(date_string, fmt).strftime("%Y-%m-%d")
        except ValueError:
            pass
    # Return None if no format matches
    return None

def handle_missing(df: pd.DataFrame, numeric_strategy: str = 'mean', categorical_strategy: str = 'mode') -> pd.DataFrame:
   for column in df.columns:
        if df[column].dtype in ['int64', 'float64']:
            if numeric_strategy == 'mean':
                df[column].fillna(df[column].mean(), inplace=True)
            elif numeric_strategy == 'median':
                df[column].fillna(df[column].median(), inplace=True)
            elif numeric_strategy == 'mode':
                df[column].fillna(df[column].mode()[0], inplace=True)
        else:
            if categorical_strategy == 'mode':
                df[column].fillna(df[column].mode()[0], inplace=True)
            elif categorical_strategy == 'dummy':
                df[column].fillna('Unknown', inplace=True)
   return df

def remove_outliers_iqr(df: pd.DataFrame, columns: List[str], factor: float = 1.5) -> pd.DataFrame:
    mask = pd.Series(True, index=df.index)
    for col in columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - factor * IQR
        upper_bound = Q3 + factor * IQR
        mask &= (df[col] >= lower_bound) & (df[col] <= upper_bound)

    cleaned_df = df[mask]

    return cleaned_df

def normalize_text(text: str) -> str:
    # Convert to lowercase
    text = str(text).lower()

    # Remove special characters
    text = re.sub(r'[^\w\s]', '', text)

    # Remove extra spaces
    text = re.sub(r'\s+', ' ', text).strip()

    return text